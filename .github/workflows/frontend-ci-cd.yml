name: Frontend CI/CD (Angular â†’ S3 + CloudFront + Security)

on:
  pull_request:
    branches: [ "main" ]        # CI on PRs (build + tests + security checks)
  push:
    branches: [ "main" ]        # Deploy on merges to main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  DIST_DIR: dist/eMedicHub-Web/browser

jobs:
  # --- PR CI: build, audit, test, build artifact ---
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps (lockfile)
        run: npm ci

      - name: Audit dependencies (fail on High/Critical)
        run: npm audit --audit-level=high

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        id: chrome

      - name: Run unit tests (ChromeHeadlessNoSandbox)
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          echo "Using Chrome at: $CHROME_BIN"
          xvfb-run -a npm test -- --watch=false --browsers=ChromeHeadlessNoSandbox

      - name: Build (production)
        run: npx ng build --configuration production

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}

  # --- Secrets scan on every PR/push ---
  gitleaks:
   name: Secret scan (gitleaks)
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Just enable detection; no 'args' anymore
        config-path: ""   # optional, only if you have custom config


  # --- Deploy to S3 + CloudFront when main is updated ---
  deploy:
    needs: [build-and-test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET:  ${{ secrets.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Sync build to S3
        run: aws s3 sync "${{ env.DIST_DIR }}" "s3://${S3_BUCKET}" --delete

      - name: Invalidate CloudFront cache
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
            --paths "/*"

  # --- OWASP ZAP baseline scan against our site after deploy ---
  zap-scan:
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      ZAP_TARGET: ${{ secrets.ZAP_TARGET }}           # e.g. https://d166veb4hcm2wv.cloudfront.net
    steps:
      - uses: actions/checkout@v4                     # to access .zap/rules.tsv if present

      - name: ZAP Baseline Scan (non-blocking to start)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ env.ZAP_TARGET }}
          rules_file_name: .zap/rules.tsv             # optional suppressions file
          cmd_options: -a                             # aggressive passive scan
          fail_action: false                          # set true later to fail on alerts

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            **/*zap*.html
            **/*report*.html
            **/*.log

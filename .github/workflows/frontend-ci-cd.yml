name: Frontend CI/CD (Angular â†’ S3 + CloudFront)

on:
  pull_request:
    branches: [ "main" ]         # CI on PRs (build + tests)
  push:
    branches: [ "main" ]         # Deploy on merges to main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DIST_DIR: dist/eMedicHub-Web/browser  # <- build output folder

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        id: chrome

      - name: Run unit tests (ChromeHeadlessNoSandbox)
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          echo "Using Chrome at: $CHROME_BIN"
          xvfb-run -a npm test -- --watch=false --browsers=ChromeHeadlessNoSandbox

      - name: Build (production)
        run: npx ng build --configuration production

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync build to S3
        run: aws s3 sync "${{ env.DIST_DIR }}" "s3://${{ secrets.S3_BUCKET }}" --delete

      - name: Invalidate CloudFront cache
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/*"

name: Deploy Angular to S3 + CloudFront

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  DIST_DIR: dist/eMedicHub-Web/browser
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET:  ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (production)
        run: npx ng build --configuration production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync build to S3
        run: aws s3 sync "$DIST_DIR" "s3://${{ secrets.S3_BUCKET }}" --delete

      - name: Verify CloudFront distribution
        run: |
          DIST_ID=$(echo "$CLOUDFRONT_DISTRIBUTION_ID" | tr -d '[:space:]')
          aws cloudfront get-distribution --id "$DIST_ID"

      - name: Invalidate CloudFront cache
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          DIST_ID=$(echo "$CLOUDFRONT_DISTRIBUTION_ID" | tr -d '[:space:]')
          echo "Using CloudFront distribution ID: '$DIST_ID'"
          aws cloudfront create-invalidation --distribution-id "$DIST_ID" --paths "/*"
     
  zap-scan:
   needs: deploy
   if: ${{ needs.deploy.result == 'success' }}
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v4
    
    - name: Verify ZAP Target Accessibility
      run: |
        echo "Attempting to access target: ${{ secrets.ZAP_TARGET }}"
        curl --head --fail ${{ secrets.ZAP_TARGET }}
        echo "Target is accessible! Continuing with ZAP scan."

    - name: Run ZAP Baseline Scan
      run: |
          docker run --rm \
            -v $(pwd):/zap/wrk/:rw \
            owasp/zap2docker-stable zap-baseline.py \
            -t ${{ secrets.ZAP_TARGET }} \
            -a
          
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-scan-report
        path: ZAP-Baseline-Report.html
